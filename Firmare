#include <Ticker.h>
#include "DHTesp.h"
#include <WiFi.h>
#include <WebServer.h>
#include "DataDisplay.h"
#include <HTTPClient.h>
#include <ArduinoJson.h>

DHTesp dht;
int dhtPin = 17;
int moistPin = 34;
bool setup_complete = false;
TaskHandle_t getDatahandle = NULL;
void getData(void *pvParameters);
void triggergetData();
void sendData();
void sendWebsite();

DynamicJsonDocument doc(2048);

String json1;
String json2;

//Wireless connection definitions
#define USE_INTRANET
#define USE_WIRELESS

#define LOCAL_SSID "VM2248161"
#define LOCAL_PASS "Home4Panda"

const String serverName = "http://www.Agripod.co.uk";


Ticker collectData;

//--DATA COLLECTION FUNCTIONS--

bool initSensors() {
  Serial.println("Initializing Sensor collecting task...");
  // initialises sensor
  dht.setup(dhtPin, DHTesp::DHT11);

  // this 'task' is attached to CPU core 1
  // parameters are as follows: function,name,stack size,parameter,prority,handle,cpu core
  xTaskCreatePinnedToCore(getData, "getData", 4000, NULL, 5, &getDatahandle, 1);

  if (getDatahandle == NULL) {
    Serial.println("Task creation failed");
    return false;
  } else {
    Serial.println("Initialization complete");
    collectData.attach(10, triggergetData);
  }
  return true;
}

void triggergetData() {
  if (getDatahandle != NULL) {
    xTaskResumeFromISR(getDatahandle);
  }
}

int dry = 2030;
int wet = 1270;

int moist;
float temp;

void getData(void *pvParameters) {
  while (1) {
    if (setup_complete == true) {
      temp = dht.getTemperature();
      moist = analogRead(moistPin);
      Serial.println(String("Temperature: ") + temp + String(" Moisture: ") + moist);
      doc["uuid"] = 1;
      doc["moisture"] = moist;
      doc["temperature"] = temp;
      sendPostManual();
      //delay(2000);
      //Serial.println(requestData());

    }
    vTaskSuspend(NULL);
  }
}

//--SERVER FUNCTIONS--

// For sending to the server via POST request
// Send JSON object with the request
void sendPost() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    String serverPath = serverName + "/inputData/";
    Serial.println("Sending to: " + serverPath);

    http.begin(client, serverName);
    //http.addHeader("Content-Type", "application/json");
    serializeJson(doc, Serial);
    serializeJson(doc, json1);
    int httpResponseCode = http.POST("{}");

    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);

    http.end();
  } else {
    Serial.println("Wifi disconnected, will attempt again");
    WifiConnect();
  }
}

void sendPostManual() {
  
  HTTPClient http;
  String serverPath = "http://www.Agripod.co.uk/inputData/";
  serializeJson(doc, json1);
  serializeJson(doc, Serial);

  http.begin(serverPath); 
  //http.addHeader("Content-Type", "Content-Type: application/json"); 

  int httpResponseCode = http.POST(json1); //Send the actual POST request

  if(httpResponseCode>0){
    String response = http.getString();  //Get the response to the request
    Serial.println(httpResponseCode);   //Print return code
    Serial.println(response);           //Print request answer
  } else {
    Serial.print("Error on sending POST: ");
    Serial.println(httpResponseCode);

    http.end();

 }
}

String requestData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    WiFiClient client;
    String payload = {};

    String serverPath = serverName + "/getLast/";
    Serial.println("Sending to: " + serverPath);
    http.begin(client, serverName);
    //http.addHeader("Content-Type", "application/json");

    StaticJsonDocument<200> req;
    req["uuid"] = 1;
    serializeJson(req, json2);

    int httpResponseCode = http.POST(json2);
    
    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
      payload = http.getString();
    }
    else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }

    http.end();
    return payload;
  }
}

void WifiConnect() {
  WiFi.begin(LOCAL_SSID, LOCAL_PASS);
  Serial.println("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("IP: ");
  Serial.print(WiFi.localIP());
}


void setup() {
  Serial.begin(115200);

  //JSON template
  doc["uuid"] = 1;
  doc["n_name"] = "fakeNetwork";
  doc["n_password"] = "bussysaka";
  doc["network_id"] = 1;
  doc["device_id"] = 1;
  doc["humidity"] = 0;
  doc["pH"] = 0;

  // We disable the watchdog timer to stop the ESP32 from timing out
#ifdef USE_WIRELESS
  WifiConnect();
#endif

  initSensors();
  setup_complete = true;

}

void loop() {
  if (!setup_complete) {
    delay(2000); //giving the esp32 some time to settle down
    setup_complete = true;
    if (getDatahandle != NULL) {
      xTaskResumeFromISR(getDatahandle);
    }
  }

}
