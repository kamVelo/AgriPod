#include <Ticker.h>
#include "DHTesp.h"
#include <WiFi.h>
#include <WebServer.h>
#include "DataDisplay.h"
#include <HTTPClient.h>
#include <ArduinoJson.h>

DHTesp dht;
int dhtPin = 17;
int moistPin = 34;
bool setup_complete = false;
TaskHandle_t getDatahandle = NULL;
void getData(void *pvParameters);
void triggergetData();
void sendData();
void sendWebsite();
int samplesize = 5;

DynamicJsonDocument doc(2048);


String json2;
String json1;

//Wireless connection definitions
#define USE_INTRANET
#define USE_WIRELESS

#define LOCAL_SSID "iPhone 13"
#define LOCAL_PASS "sussybaka"

const String serverName = "http://www.Agripod.co.uk";


Ticker collectData;

//--DATA COLLECTION FUNCTIONS--

bool initSensors() {
  Serial.println("Initializing Sensor collecting task...");
  // initialises sensor
  dht.setup(dhtPin, DHTesp::DHT11);

  // this 'task' is attached to CPU core 1
  // parameters are as follows: function,name,stack size,parameter,prority,handle,cpu core
  xTaskCreatePinnedToCore(getData, "getData", 8000, NULL, 5, &getDatahandle, 1);

  if (getDatahandle == NULL) {
    Serial.println("Task creation failed");
    return false;
  } else {
    Serial.println("Initialization complete");
    collectData.attach(60, triggergetData);
  }
  return true;
}

void triggergetData() {
  if (getDatahandle != NULL) {
    xTaskResumeFromISR(getDatahandle);
  }
}

int dry = 2030;
int wet = 1270;

float moist;
float temp;
float humidity;

// takes in an array, returns a trimmed average where all values more 
// than one standard deviation +- the mean are ignored

float filteravg(float dataset[]) {
  Serial.println("cleaning data");
  
  // sizeof() returns a value in bytes so divide by the amount of bytes
  // in a float
  //int n = sizeof(dataset);
  int n = samplesize;
  Serial.println(samplesize);

  // have to change to double since c++ is a little wussy baby and
  // the totals for moisture exceed 32767
  double x = 0;
  double x2 = 0;
  for (int i=0; i < samplesize; i++) {
    Serial.println(dataset[i]);
    x += (double)dataset[i];
    x2 += (double)pow(dataset[i],2);
  }

  // calculate standard deviation
  double stdeviation = sqrt(x2/n - pow(x/n,2));
  Serial.println(String("Standard deviation: ")+ stdeviation);
  Serial.println(String("Average: ")+(double)x/(double)n);
  
  double low = (double)x/(double)n - stdeviation;
  double high = (double)x/(double)n + stdeviation;

  // remove outliers
  x = 0;
  double len = samplesize;
  for (int i=0; i < len; i++) {
    if (dataset[i] < low || dataset[i] > high) {
      samplesize -= 1;
      Serial.println(String("Removing: ")+dataset[i]);
      Serial.println(samplesize + String(" Items left"));
    } else { 
      x += dataset[i];
    }
  }

  Serial.println((String)"Total" + (double)x + (String)"Number" + (double)samplesize);
  double avg = (double)x/(double)samplesize;
  Serial.println(String("Trimmed Avg: ") + avg);
  return (float)avg;
}


void getData(void *pvParameters) {
  while (1) {
    if (setup_complete == true) {

      // get sensors to read values 10 times over 50 seconds and take an average
      float localtemp[samplesize] = {};
      float localmoist[samplesize] = {};
      float localhumidity[samplesize] = {};
      for (int i=0; i < samplesize; i++) {
        localtemp[i] = dht.getTemperature();
        localmoist[i] = analogRead(moistPin);
        localhumidity[i] = dht.getHumidity();
        Serial.println(String("Collecting data: [") + i + String("/5]"));
        delay(3000);
      }
      
      temp = filteravg(localtemp);
      moist = filteravg(localmoist);
      humidity = filteravg(localhumidity);
      
      Serial.println(String("Temperature: ") + temp + String(" Moisture: ") + moist + String(" Humidity: ") + humidity);
      
      doc["uuid"] = 1;
      doc["moisture"] = moist;
      doc["temperature"] = temp;
      doc["humidity"] = humidity;
      
      sendPost();
      //delay(2000);
      //Serial.println(requestData());

    }
    vTaskSuspend(NULL);
  }
}

//--SERVER FUNCTIONS--

// For sending to the server via POST request
// Send JSON object with the request
void sendPost() {
  //String json1 = "{\"uuid\":1,\"n_name\":\"fakeNetwork\",\"n_password\":\"I was agent orange that was me\",\"network_id\":1,\"device_id\":1,\"humidity\"0.9,\"moisture\":420,\"temperature\":23.9}";

  HTTPClient http;
  String serverPath = serverName + "/inputData/";
  Serial.println("Sending to: " + serverPath);
  serializeJson(doc, json1);
  Serial.println(json1);

  http.begin(serverPath); 
  http.addHeader("Content-Type", "Content-Type: application/json"); 

  int httpResponseCode = http.POST(json1); //Send the actual POST request
  json1 = "";
  
  if(httpResponseCode>0){
    String response = http.getString();  //Get the response to the request
    Serial.println("Response code: ");
    Serial.println(httpResponseCode);   //Print return code
    Serial.println(response);           //Print request answer
  } else {
    Serial.print("Error on sending POST: ");
    Serial.println(httpResponseCode);

    http.end();

 }
}

// redundant function (for now)

String requestData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    WiFiClient client;
    String payload = {};

    String serverPath = serverName + "/getLast/";
    Serial.println("Sending to: " + serverPath);
    http.begin(client, serverName);
    //http.addHeader("Content-Type", "application/json");

    StaticJsonDocument<200> req;
    req["uuid"] = 1;
    serializeJson(req, json2);

    int httpResponseCode = http.POST(json2);
    
    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
      payload = http.getString();
    }
    else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }

    http.end();
    return payload;
  }
}

// Function connects to WiFi

void WifiConnect() {
  WiFi.begin(LOCAL_SSID, LOCAL_PASS);
  Serial.println("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}


void setup() {
  Serial.begin(115200);

  //JSON template
  doc["uuid"] = 1;
  doc["n_name"] = "fakeNetwork";
  doc["n_password"] = "I was agent orange that was me";
  doc["network_id"] = 1;
  doc["device_id"] = 1;

#ifdef USE_WIRELESS
  WifiConnect();
#endif

  initSensors();
  setup_complete = true;

}

void loop() {
  if (!setup_complete) {
    delay(2000); //giving the esp32 some time to settle down
    setup_complete = true;
    if (getDatahandle != NULL) {
      xTaskResumeFromISR(getDatahandle);
    }
  }

}